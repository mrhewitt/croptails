[gd_scene load_steps=13 format=3 uid="uid://drmmvukci2hmb"]

[ext_resource type="Script" uid="uid://bcm7mwi5s8nix" path="res://scenes/characters/cow/cow.gd" id="1_14ngq"]
[ext_resource type="Texture2D" uid="uid://dcxsf4sfw4cgq" path="res://assets/characters/cow_sprites.png" id="1_ilrem"]
[ext_resource type="Script" uid="uid://kxuv1plrdfs0" path="res://scripts/state_machine/node_state_machine.gd" id="2_j7g5r"]

[sub_resource type="AtlasTexture" id="AtlasTexture_gsrfl"]
atlas = ExtResource("1_ilrem")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_1cmdg"]
atlas = ExtResource("1_ilrem")
region = Rect2(32, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_essvg"]
atlas = ExtResource("1_ilrem")
region = Rect2(64, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_2exp5"]
atlas = ExtResource("1_ilrem")
region = Rect2(0, 32, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_e38go"]
atlas = ExtResource("1_ilrem")
region = Rect2(32, 32, 32, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_ehsty"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_gsrfl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1cmdg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_essvg")
}],
"loop": true,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_2exp5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_e38go")
}],
"loop": true,
"name": &"walk",
"speed": 5.0
}]

[sub_resource type="CircleShape2D" id="CircleShape2D_4i5n1"]
radius = 8.0

[sub_resource type="GDScript" id="GDScript_ilrem"]
script/source = "extends NodeState

@export var character: CharacterBody2D
@export var animated_sprite_2d: AnimatedSprite2D
@export var idle_state_wait_interval: float = 5.0

@onready var idle_state_timer: Timer = Timer.new()

var idle_state_timeout: bool = false

func _ready() -> void:
	idle_state_timer.wait_time = idle_state_wait_interval
	idle_state_timer.timeout.connect(on_idle_state_timeout)
	add_child(idle_state_timer)
	
	
func _on_process(_delta : float) -> void:
	pass


func _on_physics_process(_delta : float) -> void:
	pass


func _on_next_transitions() -> void:
	if idle_state_timeout:
		transition.emit(\"Walk\")


func _on_enter() -> void:
	animated_sprite_2d.play(\"idle\")
	idle_state_timeout = false
	idle_state_timer.start()
	
	
func _on_exit() -> void:
	animated_sprite_2d.stop()
	idle_state_timer.stop()


func on_idle_state_timeout() -> void:
	idle_state_timeout = true
"

[sub_resource type="GDScript" id="GDScript_j7g5r"]
script/source = "extends NodeState

@export var character: NonPlayableCharacter
@export var animated_sprite_2d: AnimatedSprite2D
@export var navigation_agent_2d: NavigationAgent2D
@export var min_speed: float = 5.0
@export var max_speed: float = 10.0
 
var speed: float


func _ready() -> void:
	navigation_agent_2d.velocity_computed.connect(on_safe_velocity_computed)
	call_deferred(\"character_setup\")
	
	
func character_setup() -> void:
	await get_tree().physics_frame
	set_movement_target()
	
	
func set_movement_target() -> void:
	var target_postition: Vector2 = NavigationServer2D.map_get_random_point(navigation_agent_2d.get_navigation_map(), navigation_agent_2d.navigation_layers, false)
	navigation_agent_2d.target_position = target_postition
	speed = randf_range(min_speed,max_speed)
	
	
func _on_process(_delta : float) -> void:
	pass


func _on_physics_process(_delta : float) -> void:
	if navigation_agent_2d.is_navigation_finished():
		character.current_walk_cycle += 1
		set_movement_target()
		return
		
	var target_position: Vector2 = navigation_agent_2d.get_next_path_position()
	var target_direction: Vector2 = character.global_position.direction_to(target_position)
		
	var velocity: Vector2 = target_direction * speed
	
	if navigation_agent_2d.avoidance_enabled:
		animated_sprite_2d.flip_h = velocity.x < 0
		navigation_agent_2d.velocity = velocity
	else:		 
		character.velocity = target_direction * speed
		character.move_and_slide()


func on_safe_velocity_computed(save_velocity: Vector2) -> void:
	animated_sprite_2d.flip_h = save_velocity.x < 0
	character.velocity = save_velocity
	character.move_and_slide()
	
	
func _on_next_transitions() -> void:
	if character.current_walk_cycle == character.walk_cycles:
		character.velocity = Vector2.ZERO
		transition.emit(\"Idle\")


func _on_enter() -> void:
	character.randomize_walk_cycles()
	character.current_walk_cycle = 0
	animated_sprite_2d.play(\"walk\")


func _on_exit() -> void:
	pass
"

[node name="Cow" type="CharacterBody2D"]
position = Vector2(0, -13)
collision_layer = 64
script = ExtResource("1_14ngq")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
sprite_frames = SubResource("SpriteFrames_ehsty")
animation = &"walk"
autoplay = "idle"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, 6)
shape = SubResource("CircleShape2D_4i5n1")

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="."]
navigation_layers = 2
path_postprocessing = 1
avoidance_enabled = true

[node name="StateMachine" type="Node" parent="." node_paths=PackedStringArray("initial_node_state")]
script = ExtResource("2_j7g5r")
initial_node_state = NodePath("Idle")

[node name="Idle" type="Node" parent="StateMachine" node_paths=PackedStringArray("character", "animated_sprite_2d")]
script = SubResource("GDScript_ilrem")
character = NodePath("../..")
animated_sprite_2d = NodePath("../../AnimatedSprite2D")

[node name="Walk" type="Node" parent="StateMachine" node_paths=PackedStringArray("character", "animated_sprite_2d", "navigation_agent_2d")]
script = SubResource("GDScript_j7g5r")
character = NodePath("../..")
animated_sprite_2d = NodePath("../../AnimatedSprite2D")
navigation_agent_2d = NodePath("../../NavigationAgent2D")
